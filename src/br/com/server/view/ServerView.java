/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.server.view;

import java.beans.PropertyChangeEvent;

import javax.swing.JOptionPane;

import br.com.server.exception.SystemException;
import br.com.server.exception.UserException;

/**
 * Classe responsável pela interação com o usuário.
 *
 * @author Mauricio Barbosa
 */
public class ServerView extends javax.swing.JFrame {
	private static final long serialVersionUID = 1L;
	/**
	 * Constante que indica a versão do servidor.
	 */
	private static final String VERSION = "v1.1.3 beta";
	/**
	 * Constante que indica a abertura de conexão.
	 */
	private static final String CONNECTION_OPEN = "OPEN";
	/**
	 * Constante que indica a finalização da conexão.
	 */
	private static final String CONNECTION_CLOSE = "CLOSE";
	/**
	 * Informa a quantidade de clientes conectados.
	 */
	private int clientsConnected;
	/**
	 * Objeto que fará a interface entre a camada de apresentação e a camada de negócios.
	 */
	private ServerController controller;
	/**
     * Creates new form ServerView
     */
    public ServerView(ServerController controller) {
        this.controller = controller;
    	initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlPort = new javax.swing.JLabel();
        jtfPort = new javax.swing.JTextField();
        jbConnect = new javax.swing.JButton();
        jspTextArea = new javax.swing.JScrollPane();
        jtaMessages = new javax.swing.JTextArea();
        jspTextFiield = new javax.swing.JScrollPane();
        jtfMessage = new javax.swing.JTextField();
        jbSendMessage = new javax.swing.JButton();
        jbDisconnect = new javax.swing.JButton();
        jlClientsConnecteds = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server " + VERSION + " [Disconnected]");
        
        jlPort.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jlPort.setText("Porta:");

        jbConnect.setText("Conectar");
        jbConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConnectActionPerformed(evt);
            }
        });

        jtaMessages.setEditable(false);
        jtaMessages.setColumns(20);
        jtaMessages.setRows(5);
        jtaMessages.setEnabled(false);
        jspTextArea.setViewportView(jtaMessages);

        jtfMessage.setEnabled(false);
        jspTextFiield.setViewportView(jtfMessage);

        jbSendMessage.setText("Enviar");
        jbSendMessage.setEnabled(false);
        jbSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSendMessageActionPerformed(evt);
            }
        });

        jbDisconnect.setText("Sair");
        jbDisconnect.setEnabled(false);
        jbDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlClientsConnecteds, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jspTextFiield, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbSendMessage, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbDisconnect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jspTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPort)
                    .addComponent(jtfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbConnect)
                    .addComponent(jlClientsConnecteds))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jspTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbSendMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDisconnect)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jspTextFiield))
                .addGap(11, 11, 11))
        );
        
        pack();
        
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Método responsável por solicitar a abertura de conexão à camada de negócios.
     * 
     * @param evt
     */
    private void jbConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConnectActionPerformed
        String port = jtfPort.getText();
        
        try {
	        if (port.isEmpty())
	        	throw new UserException("O numero da Porta e obrigatorio!");
	        
	        controller.openConnection(port);
	        
	        // Configura os componentes.
	        componentsConfigure(CONNECTION_OPEN);
	        
        } catch(UserException | SystemException e) {
        	String messageError = e.getMessage();
			String typeError;
			
			if (e instanceof SystemException)
				typeError = "System Error";
			else 
				typeError = "User Error";
			
			JOptionPane.showMessageDialog(this, messageError, typeError, JOptionPane.ERROR_MESSAGE);
        }
        	
    }//GEN-LAST:event_jbConnectActionPerformed

    /**
     * Método responsável por solicitar à camada de negócios o envio de mensagens do servirdor ao(s) cliente(s).
     * 
     * @param evt
     */
    private void jbSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSendMessageActionPerformed
        if (!jtfMessage.getText().isEmpty()) {
        	String message = "Server diz : " + jtfMessage.getText();
        	
        	controller.sendMessage(message);
        	
        	jtfMessage.setText("");
        	jtaMessages.append(message + "\n");
        	
        }
    }//GEN-LAST:event_jbSendMessageActionPerformed

    /**
     * Método responsável por solicitar à camada de negócios a finalização de conexões com clientes.
     * 
     * @param evt
     */
    private void jbDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDisconnectActionPerformed
    	String warningMessage;
    	if (/*controller.checkConnectedClients()*/  clientsConnected > 0)
        	warningMessage = "Existem clientes conectados. Deseja finalizar a conexao assim mesmo ?";
    	else
    		warningMessage = "Tem certeza que deseja desconectar o servidor ?";
    	
    	int response = JOptionPane.showConfirmDialog(this, warningMessage , "End Connection", 
  				JOptionPane.YES_NO_OPTION, 
  				JOptionPane.WARNING_MESSAGE);
    	
    	if(response == JOptionPane.OK_OPTION) {
    		try {
    			controller.closeConnection();
    		} catch(SystemException e) {
    			String messageError = e.getMessage();
    			
    			JOptionPane.showMessageDialog(this, messageError, "System Error", JOptionPane.ERROR_MESSAGE);
    		}
    		
    		// Limpa os componentes
    		jtfPort.setText("");
    		jtfMessage.setText("");
    		jtaMessages.setText("");
    		
    		// Configura os componentes
    		componentsConfigure(CONNECTION_CLOSE);
    	}
    	
    }//GEN-LAST:event_jbDisconnectActionPerformed

    /**
     * Método responsável por exibir novas mensagens na camada de apresentação.
     * 
     * @param evt
     */
    public void modelPropertyChange(PropertyChangeEvent evt) {
    	String newMessage = (String) evt.getNewValue();
        
    	if (newMessage.equalsIgnoreCase("Novo cliente conectado")) {
    		clientsConnected++;
    		jlClientsConnecteds.setText(clientsConnected + " Client(s) Connected");
    		if (clientsConnected == 1) {
    			jbSendMessage.setEnabled(true);
    			jtfMessage.setEnabled(true);
    			jlClientsConnecteds.setForeground(new java.awt.Color(0, 153, 0));
    		}
    	} else if (newMessage.equalsIgnoreCase("Fulano desconectou-se")) {
    		clientsConnected--;
    		jlClientsConnecteds.setText(clientsConnected + " Client(s) Connected");
    		if (clientsConnected == 0) {
    			jbSendMessage.setEnabled(false);
    			jtfMessage.setEnabled(false);
    			jlClientsConnecteds.setForeground(new java.awt.Color(204, 0, 0));
    		}
    	}
    	
        jtaMessages.append(newMessage + "\n");
    }
    
    /**
     * Método responsável pela configuração dos componentes de apresentação.
     * 
     * @param status
     */
    private void componentsConfigure(String status) {
    	boolean value = status.equals(CONNECTION_OPEN);
    	
    	String title = "Server " + VERSION + (value ? " [Connected]" : " [Disconnected]");
    	
    	setTitle(title);
    	
    	clientsConnected = 0;
    	
    	jlClientsConnecteds.setText(clientsConnected + " Client(s) connected");
    	jlClientsConnecteds.setForeground(new java.awt.Color(204, 0, 0));
    	jlClientsConnecteds.setVisible(value);
        
        jlPort.setEnabled(!value);
        jtfPort.setEnabled(!value);
        jbConnect.setEnabled(!value);
        jtaMessages.setEnabled(value);
        jbSendMessage.setEnabled(false);
        jtfMessage.setEnabled(false);
        jbDisconnect.setEnabled(value);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbConnect;
    private javax.swing.JButton jbDisconnect;
    private javax.swing.JButton jbSendMessage;
    private javax.swing.JLabel jlClientsConnecteds;
    private javax.swing.JLabel jlPort;
    private javax.swing.JScrollPane jspTextArea;
    private javax.swing.JScrollPane jspTextFiield;
    private javax.swing.JTextArea jtaMessages;
    private javax.swing.JTextField jtfMessage;
    private javax.swing.JTextField jtfPort;
    // End of variables declaration//GEN-END:variables
}
